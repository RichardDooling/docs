{
  "openapi": "3.0.2",
  "info": {
    "title": "NinjaAPI",
    "version": "1.0.0",
    "description": ""
  },
  "paths": {
    "/exports": {
      "post": {
        "operationId": "api_views_exports_create_export",
        "summary": "Create Export",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Export"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_CreateExportErrorCode_"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "get": {
        "operationId": "api_views_exports_list_exports",
        "summary": "List Exports",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/exports/{id}": {
      "get": {
        "operationId": "api_views_exports_retrieve_export",
        "summary": "Retrieve Export",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Export"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/tags": {
      "post": {
        "operationId": "api_views_subscriber_tags_create_tag",
        "summary": "Create Tag",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "get": {
        "operationId": "api_views_subscriber_tags_list_tags",
        "summary": "List Tags",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/tags/{id}": {
      "get": {
        "operationId": "api_views_subscriber_tags_retrieve_tag",
        "summary": "Retrieve Tag",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "patch": {
        "operationId": "api_views_subscriber_tags_update_tag",
        "summary": "Update Tag",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_UpdateTagErrorCode_"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagUpdateInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "delete": {
        "operationId": "api_views_subscriber_tags_delete_tag",
        "summary": "Delete Tag",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/tags/{id}/analytics": {
      "get": {
        "operationId": "api_views_subscriber_tags_retrieve_tag_analytics",
        "summary": "Retrieve Tag Analytics",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagAnalytics"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/ping": {
      "get": {
        "operationId": "api_views_ping_ping",
        "summary": "Ping",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Empty"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "GlobalAuth": []
          }
        ]
      }
    },
    "/images": {
      "post": {
        "operationId": "api_views_images_create_image",
        "summary": "Create Image",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "title": "FileParams",
                "type": "object",
                "properties": {
                  "image": {
                    "title": "Image",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": ["image"]
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/images/{id}": {
      "delete": {
        "operationId": "api_views_images_delete_image",
        "summary": "Delete Image",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/emails": {
      "post": {
        "operationId": "api_views_emails_create_email",
        "summary": "Create Email",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_EmailCreationErrorCode_"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "get": {
        "operationId": "api_views_emails_list_emails",
        "summary": "List Emails",
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "description": "Note that for historical reasons, if `status` is not included in the query, the default is to only return emails with a status of `about_to_send`, `in_flight`, or `sent`. This is a legacy behavior and may change in the future.\n\nIf you want to include drafts, you must explicitly include `draft` in the `status` query parameter. (Same thing with imported emails.)\n",
              "default": ["about_to_send", "in_flight", "sent"],
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EmailStatus"
              }
            },
            "required": false,
            "description": "Note that for historical reasons, if `status` is not included in the query, the default is to only return emails with a status of `about_to_send`, `in_flight`, or `sent`. This is a legacy behavior and may change in the future.\n\nIf you want to include drafts, you must explicitly include `draft` in the `status` query parameter. (Same thing with imported emails.)\n"
          },
          {
            "in": "query",
            "name": "included_tags",
            "schema": {
              "title": "Included Tags",
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "excluded_tags",
            "schema": {
              "title": "Excluded Tags",
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "automations",
            "schema": {
              "title": "Automations",
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "ids",
            "schema": {
              "title": "Ids",
              "default": [],
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "default": "creation_date",
              "allOf": [
                {
                  "title": "Ordering",
                  "description": "An enumeration.",
                  "enum": [
                    "creation_date",
                    "-creation_date",
                    "status",
                    "-status",
                    "publish_date",
                    "-publish_date",
                    "subject",
                    "-subject",
                    "email_type",
                    "-email_type",
                    "modification_date",
                    "-modification_date",
                    "clicks",
                    "-clicks",
                    "opens",
                    "-opens",
                    "click_rate",
                    "-click_rate",
                    "open_rate",
                    "-open_rate",
                    "page_views__lifetime",
                    "-page_views__lifetime",
                    "page_views__30",
                    "-page_views__30",
                    "page_views__7",
                    "-page_views__7",
                    "webmentions",
                    "-webmentions",
                    "subscriptions",
                    "-subscriptions",
                    "paid_subscriptions",
                    "-paid_subscriptions",
                    "unsubscriptions",
                    "-unsubscriptions",
                    "replies",
                    "-replies",
                    "comments",
                    "-comments"
                  ],
                  "type": "string"
                }
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "creation_date__start",
            "schema": {
              "title": "Creation Date  Start",
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "creation_date__end",
            "schema": {
              "title": "Creation Date  End",
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "publish_date__start",
            "schema": {
              "title": "Publish Date  Start",
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "publish_date__end",
            "schema": {
              "title": "Publish Date  End",
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "excluded_fields",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EmailExcludableField"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "source",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EmailSource"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "email_type",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/EmailType"
              }
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_EmailListErrorCode_"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/emails/{id}": {
      "patch": {
        "operationId": "api_views_emails_update_email",
        "summary": "Update Email",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailUpdateInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "get": {
        "operationId": "api_views_emails_retrieve_email",
        "summary": "Retrieve Email",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/emails/{id}/history": {
      "get": {
        "operationId": "api_views_emails_retrieve_email_history",
        "summary": "Retrieve Email History",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "field",
            "schema": {
              "title": "Field",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Response",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/History"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/emails/{id}/analytics": {
      "get": {
        "operationId": "api_views_emails_retrieve_email_analytics",
        "summary": "Retrieve Email Analytics",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Analytics"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/emails/{id}/unsubscribers": {
      "get": {
        "operationId": "api_views_emails_list_unsubscribers",
        "summary": "List Unsubscribers",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailEventPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/emails/{id}/events": {
      "get": {
        "operationId": "api_views_emails_list_events",
        "summary": "List Events",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "event_type",
            "schema": {
              "title": "Event Type",
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailEventPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/emails/{id}/survey-responses": {
      "get": {
        "operationId": "api_views_emails_retrieve_survey_responses",
        "summary": "Retrieve Survey Responses",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponsePage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/emails/{id}/webmentions": {
      "get": {
        "operationId": "api_views_emails_retrieve_webmentions",
        "summary": "Retrieve Webmentions",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebmentionPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/emails/{id}/send-draft": {
      "post": {
        "operationId": "api_views_emails_send_draft",
        "summary": "Send Draft",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendDraftInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/subscribers": {
      "post": {
        "operationId": "api_views_subscribers_create_subscriber",
        "summary": "Create Subscriber",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriber"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_CreateSubscriberErrorCode_"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriberInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "NewsletterIDKey": []
          }
        ]
      },
      "get": {
        "operationId": "api_views_subscribers_list_subscribers",
        "summary": "List Subscribers",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SubscriberType"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "ids",
            "schema": {
              "title": "Ids",
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "email",
            "schema": {
              "title": "Email",
              "default": "",
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "tag",
            "schema": {
              "title": "Tag",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "-tag",
            "schema": {
              "title": "-Tag",
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "title": "Ordering",
              "default": "-creation_date",
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "utm_source",
            "schema": {
              "title": "Utm Source",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "price",
            "schema": {
              "title": "Price",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "coupon",
            "schema": {
              "title": "Coupon",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "date",
            "schema": {
              "title": "Date",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "last_open_date",
            "schema": {
              "title": "Last Open Date",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "last_click_date",
            "schema": {
              "title": "Last Click Date",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "subscriber_import",
            "schema": {
              "title": "Subscriber Import",
              "description": "If provided, only return subscribers that were imported by the given subscriber import.",
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "If provided, only return subscribers that were imported by the given subscriber import."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_ListSubscribersErrorCode_"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/subscribers/{id_or_email}": {
      "get": {
        "operationId": "api_views_subscribers_retrieve_subscriber",
        "summary": "Retrieve Subscriber",
        "parameters": [
          {
            "in": "path",
            "name": "id_or_email",
            "schema": {
              "title": "Id Or Email",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriber"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "delete": {
        "operationId": "api_views_subscribers_delete_subscriber",
        "summary": "Delete Subscriber",
        "parameters": [
          {
            "in": "path",
            "name": "id_or_email",
            "schema": {
              "title": "Id Or Email",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "patch": {
        "operationId": "api_views_subscribers_update_subscriber",
        "summary": "Update Subscriber",
        "parameters": [
          {
            "in": "path",
            "name": "id_or_email",
            "schema": {
              "title": "Id Or Email",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriber"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_UpdateSubscriberErrorCode_"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriberUpdateInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "NewsletterIDKey": []
          }
        ]
      }
    },
    "/subscribers/{id_or_email}/send-reminder": {
      "post": {
        "operationId": "api_views_subscribers_send_reminder",
        "summary": "Send Reminder",
        "parameters": [
          {
            "in": "path",
            "name": "id_or_email",
            "schema": {
              "title": "Id Or Email",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/subscribers/{id_or_email}/emails/{email_id}": {
      "post": {
        "operationId": "api_views_subscribers_send_email_to",
        "summary": "Send Email To",
        "parameters": [
          {
            "in": "path",
            "name": "id_or_email",
            "schema": {
              "title": "Id Or Email",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "path",
            "name": "email_id",
            "schema": {
              "title": "Email Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/subscribers/{id_or_email}/clients": {
      "get": {
        "operationId": "api_views_subscribers_get_clients",
        "summary": "Get Clients",
        "parameters": [
          {
            "in": "path",
            "name": "id_or_email",
            "schema": {
              "title": "Id Or Email",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/subscribers/{id_or_email}/referrals": {
      "get": {
        "operationId": "api_views_subscribers_get_referrals",
        "summary": "Get Referrals",
        "parameters": [
          {
            "in": "path",
            "name": "id_or_email",
            "schema": {
              "title": "Id Or Email",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/subscribers/{id_or_email}/survey-responses": {
      "get": {
        "operationId": "api_views_subscribers_get_survey_responses",
        "summary": "Get Survey Responses",
        "parameters": [
          {
            "in": "path",
            "name": "id_or_email",
            "schema": {
              "title": "Id Or Email",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "expand",
            "schema": {
              "title": "Expand",
              "description": "If provided, expand the given field. (Only supported field: 'survey').",
              "type": "string"
            },
            "required": false,
            "description": "If provided, expand the given field. (Only supported field: 'survey')."
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponsePage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "post": {
        "operationId": "api_views_subscribers_create_survey_response",
        "summary": "Create Survey Response",
        "parameters": [
          {
            "in": "path",
            "name": "id_or_email",
            "schema": {
              "title": "Id Or Email",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResponseInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/subscribers/{id}/automations": {
      "get": {
        "operationId": "api_views_subscribers_get_automations",
        "summary": "Get Automations",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationForSubscriberPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/subscribers/{id_or_email}/email-events": {
      "get": {
        "operationId": "api_views_subscribers_get_email_events",
        "summary": "Get Email Events",
        "parameters": [
          {
            "in": "path",
            "name": "id_or_email",
            "schema": {
              "title": "Id Or Email",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailEventForSubscriberPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/subscribers/{id_or_email}/stripe-subscriptions": {
      "get": {
        "operationId": "api_views_subscribers_get_stripe_subscriptions",
        "summary": "Get Stripe Subscriptions",
        "parameters": [
          {
            "in": "path",
            "name": "id_or_email",
            "schema": {
              "title": "Id Or Email",
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StripeSubscriptionPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/newsletters": {
      "get": {
        "operationId": "api_views_newsletters_list_newsletters",
        "summary": "List Newsletters",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewsletterPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "post": {
        "operationId": "api_views_newsletters_create_newsletter",
        "summary": "Create Newsletter",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Newsletter"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_CreateNewsletterErrorCode_"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewsletterInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/newsletters/{id}": {
      "patch": {
        "operationId": "api_views_newsletters_update_newsletter",
        "summary": "Update Newsletter",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Newsletter"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewsletterUpdateInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "delete": {
        "operationId": "api_views_newsletters_delete_newsletter",
        "summary": "Delete Newsletter",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/bulk_actions": {
      "post": {
        "operationId": "api_views_bulk_actions_create_bulk_action",
        "summary": "Create Bulk Action",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkAction"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkActionInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "GlobalAuth": []
          }
        ]
      }
    },
    "/bulk_actions/{id}": {
      "get": {
        "operationId": "api_views_bulk_actions_retrieve_bulk_action",
        "summary": "Retrieve Bulk Action",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkAction"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/external_feeds": {
      "post": {
        "operationId": "api_views_external_feeds_create_external_feed",
        "summary": "Create External Feed",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalFeed"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalFeedInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "get": {
        "operationId": "api_views_external_feeds_list_external_feed",
        "summary": "List External Feed",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalFeedPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/external_feeds/{id}": {
      "patch": {
        "operationId": "api_views_external_feeds_update_external_feed",
        "summary": "Update External Feed",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalFeed"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExternalFeedUpdateInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "delete": {
        "operationId": "api_views_external_feeds_delete_external_feed",
        "summary": "Delete External Feed",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "get": {
        "operationId": "api_views_external_feeds_retrieve_external_feed",
        "summary": "Retrieve External Feed",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalFeed"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/external_feeds/{id}/items": {
      "post": {
        "operationId": "api_views_external_feeds_poll_items",
        "summary": "Poll Items",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmptyMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "get": {
        "operationId": "api_views_external_feeds_retrieve_items",
        "summary": "Retrieve Items",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExternalFeedItemPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/automations": {
      "get": {
        "operationId": "api_views_automations_list_automations",
        "summary": "List Automations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutomationPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "post": {
        "operationId": "api_views_automations_create_automation",
        "summary": "Create Automation",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Automation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_AutomationCreationErrorCode_"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/automations/{id}/subscribers": {
      "get": {
        "operationId": "api_views_automations_retrieve_automation_subscribers",
        "summary": "Retrieve Automation Subscribers",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "expand",
            "schema": {
              "title": "Expand",
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "title": "Page",
              "default": 1,
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberForAutomationPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/automations/{id}": {
      "patch": {
        "operationId": "api_views_automations_update_automation",
        "summary": "Update Automation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Automation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutomationUpdateInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "delete": {
        "operationId": "api_views_automations_delete_automation",
        "summary": "Delete Automation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/automations/{id}/analytics": {
      "get": {
        "operationId": "api_views_automations_retrieve_automation_analytics",
        "summary": "Retrieve Automation Analytics",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Analytics"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/automations/{id}/events": {
      "get": {
        "operationId": "api_views_automations_list_events",
        "summary": "List Events",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "event_type",
            "schema": {
              "title": "Event Type",
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailEventPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/automations/{id}/unsubscribers": {
      "get": {
        "operationId": "api_views_automations_list_unsubscribers",
        "summary": "List Unsubscribers",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailEventPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/users": {
      "post": {
        "operationId": "api_views_users_create_user",
        "summary": "Create User",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_Failure_"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "get": {
        "operationId": "api_views_users_list_users",
        "summary": "List Users",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/users/{id}": {
      "delete": {
        "operationId": "api_views_users_delete_user",
        "summary": "Delete User",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "patch": {
        "operationId": "api_views_users_update_user",
        "summary": "Update User",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/prices": {
      "get": {
        "operationId": "api_views_prices_list_prices",
        "summary": "List Prices",
        "parameters": [
          {
            "in": "query",
            "name": "expand",
            "schema": {
              "title": "Expand",
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricePage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_ListPricesErrorCode_"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "post": {
        "operationId": "api_views_prices_create_price",
        "summary": "Create Price",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Price"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_CreatePriceErrorCode_"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PriceInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/coupons": {
      "get": {
        "operationId": "api_views_coupons_list_coupons",
        "summary": "List Coupons",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StripeCouponPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/surveys": {
      "post": {
        "operationId": "api_views_surveys_create_survey",
        "summary": "Create Survey",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Survey"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_CreateSurveyErrorCode_"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SurveyInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "get": {
        "operationId": "api_views_surveys_list_surveys",
        "summary": "List Surveys",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SurveyPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/surveys/{id}": {
      "get": {
        "operationId": "api_views_surveys_retrieve_survey",
        "summary": "Retrieve Survey",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Survey"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "patch": {
        "operationId": "api_views_surveys_update_survey",
        "summary": "Update Survey",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Survey"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage_UpdateSurveyErrorCode_"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SurveyUpdateInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "delete": {
        "operationId": "api_views_surveys_delete_survey",
        "summary": "Delete Survey",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/surveys/{id}/responses": {
      "get": {
        "operationId": "api_views_surveys_retrieve_survey_responses",
        "summary": "Retrieve Survey Responses",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "email",
            "schema": {
              "title": "Email",
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "subscriber",
            "schema": {
              "title": "Subscriber",
              "type": "string",
              "format": "uuid"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "creation_date__start",
            "schema": {
              "title": "Creation Date  Start",
              "type": "string"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "creation_date__end",
            "schema": {
              "title": "Creation Date  End",
              "type": "string"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponsePage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/api_requests/{id}": {
      "get": {
        "operationId": "api_views_api_requests_retrieve_api_request",
        "summary": "Retrieve Api Request",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIRequestDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/api_requests": {
      "get": {
        "operationId": "api_views_api_requests_list_api_requests",
        "summary": "List Api Requests",
        "parameters": [
          {
            "in": "query",
            "name": "status_code",
            "schema": {
              "title": "Status Code",
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "method",
            "schema": {
              "title": "Method",
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "title": "Page",
              "default": 1,
              "type": "integer"
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIRequestPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/advertising_units": {
      "get": {
        "operationId": "api_views_advertising_units_list_advertising_units",
        "summary": "List Advertising Units",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdvertisingUnitPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "post": {
        "operationId": "api_views_advertising_units_create_advertising_unit",
        "summary": "Create Advertising Unit",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdvertisingUnit"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdvertisingUnitInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/advertising_units/{id}": {
      "patch": {
        "operationId": "api_views_advertising_units_update_advertising_unit",
        "summary": "Update Advertising Unit",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdvertisingUnit"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdvertisingUnitUpdateInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "delete": {
        "operationId": "api_views_advertising_units_delete_advertising_unit",
        "summary": "Delete Advertising Unit",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/webhooks": {
      "post": {
        "operationId": "api_views_webhooks_create_webhook",
        "summary": "Create Webhook",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "get": {
        "operationId": "api_views_webhooks_list_webhooks",
        "summary": "List Webhooks",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/webhooks/{id}": {
      "get": {
        "operationId": "api_views_webhooks_retrieve_webhook",
        "summary": "Retrieve Webhook",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "patch": {
        "operationId": "api_views_webhooks_update_webhook",
        "summary": "Update Webhook",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookInput"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      },
      "delete": {
        "operationId": "api_views_webhooks_delete_webhook",
        "summary": "Delete Webhook",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "title": "Id",
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    },
    "/comments": {
      "get": {
        "operationId": "api_views_comments_list_comments",
        "summary": "List Comments",
        "parameters": [
          {
            "in": "query",
            "name": "email_id",
            "schema": {
              "title": "Email Id",
              "description": "If provided, only return comments for the given email.",
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "If provided, only return comments for the given email."
          },
          {
            "in": "query",
            "name": "subscriber_id",
            "schema": {
              "title": "Subscriber Id",
              "description": "If provided, only return comments for the given subscriber.",
              "type": "string",
              "format": "uuid"
            },
            "required": false,
            "description": "If provided, only return comments for the given subscriber."
          },
          {
            "in": "query",
            "name": "expand",
            "schema": {
              "title": "Expand",
              "description": "If provided, expand the given field. (Only supported field: 'subscriber').",
              "type": "string"
            },
            "required": false,
            "description": "If provided, expand the given field. (Only supported field: 'subscriber')."
          },
          {
            "in": "query",
            "name": "ordering",
            "schema": {
              "default": "-creation_date",
              "allOf": [
                {
                  "title": "Ordering",
                  "description": "An enumeration.",
                  "enum": [
                    "creation_date",
                    "-creation_date",
                    "email",
                    "-email",
                    "subscriber",
                    "-subscriber"
                  ],
                  "type": "string"
                }
              ]
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "AuthenticationRequirement": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ExportStatus": {
        "title": "Status",
        "description": "Represents the status of an export.\n\nNo action is required to move from one state or another; Buttondown\ninternally handles the transitions, and exposing the status is for\nobservability purposes only.",
        "enum": ["error", "in_progress", "not_started", "ready"],
        "type": "string"
      },
      "Export": {
        "title": "Export",
        "description": "Some software applications may want programmatic access to their newsletter exports.\nThis assists with a few niche use cases, such as regular backups or data ingestion\n(into a data warehouse), or post-publishing processes that hinge on email events.\n\nIn general, you probably won't _need_ to use this endpoint unless you\n _absolutely_ need to use this endpoint.",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/ExportStatus"
          },
          "url": {
            "title": "Url",
            "type": "string"
          },
          "completion_date": {
            "title": "Completion Date",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["id", "creation_date", "status"]
      },
      "ErrorMessage": {
        "title": "ErrorMessage",
        "type": "object",
        "properties": {
          "code": {
            "title": "Code"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": ["detail"]
      },
      "CreateExportErrorCode": {
        "title": "CreateExportErrorCode",
        "description": "An enumeration.",
        "enum": ["collection_empty_invalid"],
        "type": "string"
      },
      "ErrorMessage_CreateExportErrorCode_": {
        "title": "ErrorMessage[CreateExportErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/CreateExportErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": ["code", "detail"]
      },
      "ExportCollection": {
        "title": "Collection",
        "description": "A group of data that can be exported in an export.",
        "enum": [
          "subscribers",
          "emails",
          "events",
          "referrals",
          "surveys",
          "comments",
          "requests"
        ],
        "type": "string"
      },
      "ExportInput": {
        "title": "ExportInput",
        "type": "object",
        "properties": {
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportCollection"
            }
          }
        },
        "required": ["collections"]
      },
      "ExportPage": {
        "title": "Page[Export]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Export"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": ["results", "count"]
      },
      "Tag": {
        "title": "Tag",
        "description": "Tags are a way to organize your subscribers. You can create, update, and\ndelete tags via the API. You can also list all tags for a given newsletter.\n\nTags don't have any strict functionality on their own, but you can send emails\nto subscribers with a given tag (or to all subscribers _without_ a given tag.)",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "color": {
            "title": "Color",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "secondary_id": {
            "title": "Secondary Id",
            "type": "integer"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["id", "name", "color", "secondary_id", "creation_date"]
      },
      "TagInput": {
        "title": "TagInput",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "color": {
            "title": "Color",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        },
        "required": ["name", "color"]
      },
      "TagPage": {
        "title": "Page[Tag]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": ["results", "count"]
      },
      "UpdateTagErrorCode": {
        "title": "UpdateTagErrorCode",
        "description": "A potential error code that can be returned when updating a tag.",
        "enum": ["name_already_exists"],
        "type": "string"
      },
      "ErrorMessage_UpdateTagErrorCode_": {
        "title": "ErrorMessage[UpdateTagErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/UpdateTagErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": ["code", "detail"]
      },
      "TagUpdateInput": {
        "title": "TagUpdateInput",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "color": {
            "title": "Color",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "secondary_id": {
            "title": "Secondary Id",
            "type": "integer"
          }
        }
      },
      "TagAnalytics": {
        "title": "TagAnalytics",
        "type": "object",
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "click_rate": {
            "title": "Click Rate",
            "type": "number"
          },
          "open_rate": {
            "title": "Open Rate",
            "type": "number"
          },
          "retention": {
            "title": "Retention",
            "type": "number"
          }
        },
        "required": ["count", "click_rate", "open_rate", "retention"]
      },
      "Empty": {
        "title": "Empty",
        "type": "object",
        "properties": {}
      },
      "Image": {
        "title": "Image",
        "description": "Images are, well, images! Buttondown allows you to upload images to its secure\nS3 bucket and do with them what you will. This is sort of an odd duck of an\nAPI, to be sure, but if you want to be able to do things like draft\nand send emails completely on your iPad you need a surefire way of creating images.",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "image": {
            "title": "Image",
            "type": "string"
          }
        },
        "required": ["id", "creation_date", "image"]
      },
      "EmailSource": {
        "title": "Source",
        "description": "Represents the original provenance of an email. This value is not exposed\nto subscribers, but does determine some behavior of the email (e.g. whether\nor not analytics can be calculated.)",
        "enum": ["api", "import", "app", "external_feed"],
        "type": "string"
      },
      "EmailType": {
        "title": "Type",
        "description": "Represents the audience of an email, and to whom it is visible both in the initial\nemail and in online archives.",
        "enum": [
          "public",
          "private",
          "premium",
          "free",
          "churned",
          "archival",
          "hidden"
        ],
        "type": "string"
      },
      "EmailStatus": {
        "title": "Status",
        "description": "Represents the state of an email.\n\nNo action is required to move from one state or another; Buttondown\ninternally handles the transitions, and exposing the status is for\nobservability purposes only.",
        "enum": [
          "draft",
          "managed_by_rss",
          "about_to_send",
          "scheduled",
          "in_flight",
          "paused",
          "deleted",
          "errored",
          "sent",
          "imported"
        ],
        "type": "string"
      },
      "Analytics": {
        "title": "Analytics",
        "type": "object",
        "properties": {
          "recipients": {
            "title": "Recipients",
            "default": 0,
            "type": "integer"
          },
          "deliveries": {
            "title": "Deliveries",
            "default": 0,
            "type": "integer"
          },
          "opens": {
            "title": "Opens",
            "default": 0,
            "type": "integer"
          },
          "clicks": {
            "title": "Clicks",
            "default": 0,
            "type": "integer"
          },
          "temporary_failures": {
            "title": "Temporary Failures",
            "default": 0,
            "type": "integer"
          },
          "permanent_failures": {
            "title": "Permanent Failures",
            "default": 0,
            "type": "integer"
          },
          "unsubscriptions": {
            "title": "Unsubscriptions",
            "default": 0,
            "type": "integer"
          },
          "complaints": {
            "title": "Complaints",
            "default": 0,
            "type": "integer"
          },
          "survey_responses": {
            "title": "Survey Responses",
            "default": 0,
            "type": "integer"
          },
          "webmentions": {
            "title": "Webmentions",
            "default": 0,
            "type": "integer"
          },
          "page_views__lifetime": {
            "title": "Page Views  Lifetime",
            "default": 0,
            "type": "integer"
          },
          "page_views__30": {
            "title": "Page Views  30",
            "default": 0,
            "type": "integer"
          },
          "page_views__7": {
            "title": "Page Views  7",
            "default": 0,
            "type": "integer"
          },
          "subscriptions": {
            "title": "Subscriptions",
            "default": 0,
            "type": "integer"
          },
          "paid_subscriptions": {
            "title": "Paid Subscriptions",
            "default": 0,
            "type": "integer"
          },
          "replies": {
            "title": "Replies",
            "default": 0,
            "type": "integer"
          },
          "comments": {
            "title": "Comments",
            "default": 0,
            "type": "integer"
          }
        }
      },
      "Email": {
        "title": "Email",
        "description": "Emails are what you're for here on Buttondown at the end of the day, right?\nCreating an email via the API is just like creating one in the interface;\nit will instantly trigger sending actual emails,\nbased on the tags and email type you provide.",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "included_tags": {
            "title": "Included Tags",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "excluded_tags": {
            "title": "Excluded Tags",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "modification_date": {
            "title": "Modification Date",
            "type": "string",
            "format": "date-time"
          },
          "publish_date": {
            "title": "Publish Date",
            "type": "string",
            "format": "date-time"
          },
          "attachments": {
            "title": "Attachments",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "subject": {
            "title": "Subject",
            "type": "string"
          },
          "canonical_url": {
            "title": "Canonical Url",
            "type": "string"
          },
          "image": {
            "title": "Image",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/EmailSource"
          },
          "body": {
            "title": "Body",
            "description": "Can be either HTML or markdown.",
            "type": "string"
          },
          "secondary_id": {
            "title": "Secondary Id",
            "type": "integer"
          },
          "email_type": {
            "$ref": "#/components/schemas/EmailType"
          },
          "slug": {
            "title": "Slug",
            "type": "string"
          },
          "external_url": {
            "title": "External Url",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/EmailStatus"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "should_send_teaser": {
            "title": "Should Send Teaser",
            "type": "boolean"
          },
          "is_comments_disabled": {
            "title": "Is Comments Disabled",
            "type": "boolean"
          },
          "custom_teaser": {
            "title": "Custom Teaser",
            "type": "string"
          },
          "absolute_url": {
            "title": "Absolute Url",
            "type": "string"
          },
          "filters": {
            "title": "Filters",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "analytics": {
            "$ref": "#/components/schemas/Analytics"
          }
        },
        "required": [
          "id",
          "creation_date",
          "modification_date",
          "subject",
          "canonical_url",
          "image",
          "description",
          "source",
          "body",
          "email_type",
          "external_url",
          "status",
          "should_send_teaser",
          "is_comments_disabled",
          "custom_teaser",
          "absolute_url",
          "filters"
        ]
      },
      "EmailCreationErrorCode": {
        "title": "EmailCreationErrorCode",
        "description": "Represents the type of error that occurred when creating an email.\n\nHuman-readable error messages are provided in the `detail` field of the response;\nthese values are meant to be parseable by code or client logic.",
        "enum": [
          "subject_invalid",
          "email_duplicate",
          "email_invalid",
          "body_invalid",
          "publish_date_invalid",
          "publish_date_missing",
          "status_invalid",
          "slug_invalid",
          "canonical_url_invalid",
          "tag_invalid"
        ],
        "type": "string"
      },
      "ErrorMessage_EmailCreationErrorCode_": {
        "title": "ErrorMessage[EmailCreationErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/EmailCreationErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": ["code", "detail"]
      },
      "EmailInput": {
        "title": "EmailInput",
        "type": "object",
        "properties": {
          "included_tags": {
            "title": "Included Tags",
            "default": [],
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string"
                }
              ]
            }
          },
          "excluded_tags": {
            "title": "Excluded Tags",
            "default": [],
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string"
                }
              ]
            }
          },
          "attachments": {
            "title": "Attachments",
            "default": [],
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "publish_date": {
            "title": "Publish Date",
            "type": "string",
            "format": "date-time"
          },
          "subject": {
            "title": "Subject",
            "type": "string"
          },
          "slug": {
            "title": "Slug",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "default": "",
            "type": "string"
          },
          "canonical_url": {
            "title": "Canonical Url",
            "default": "",
            "type": "string"
          },
          "image": {
            "title": "Image",
            "default": "",
            "type": "string"
          },
          "body": {
            "title": "Body",
            "description": "Can be either HTML or markdown.",
            "default": "",
            "type": "string"
          },
          "email_type": {
            "default": "public",
            "allOf": [
              {
                "$ref": "#/components/schemas/EmailType"
              }
            ]
          },
          "status": {
            "default": "about_to_send",
            "allOf": [
              {
                "$ref": "#/components/schemas/EmailStatus"
              }
            ]
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "should_send_teaser": {
            "title": "Should Send Teaser",
            "default": false,
            "type": "boolean"
          },
          "is_comments_disabled": {
            "title": "Is Comments Disabled",
            "default": false,
            "type": "boolean"
          },
          "custom_teaser": {
            "title": "Custom Teaser",
            "default": "",
            "type": "string"
          },
          "secondary_id": {
            "title": "Secondary Id",
            "type": "integer"
          },
          "filters": {
            "title": "Filters",
            "default": [],
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "required": ["subject"]
      },
      "EmailPage": {
        "title": "Page[Email]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Email"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": ["results", "count"]
      },
      "EmailListErrorCode": {
        "title": "EmailListErrorCode",
        "description": "Represents the type of error that occurred when listing emails.\n\nHuman-readable error messages are provided in the `detail` field of the response;\nthese values are meant to be parseable by code or client logic.",
        "enum": ["creation_date_invalid", "publish_date_invalid"],
        "type": "string"
      },
      "ErrorMessage_EmailListErrorCode_": {
        "title": "ErrorMessage[EmailListErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/EmailListErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": ["code", "detail"]
      },
      "EmailUpdateInput": {
        "title": "EmailUpdateInput",
        "type": "object",
        "properties": {
          "included_tags": {
            "title": "Included Tags",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string"
                }
              ]
            }
          },
          "excluded_tags": {
            "title": "Excluded Tags",
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "uuid"
                },
                {
                  "type": "string"
                }
              ]
            }
          },
          "attachments": {
            "title": "Attachments",
            "default": [],
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "publish_date": {
            "title": "Publish Date",
            "type": "string",
            "format": "date-time"
          },
          "subject": {
            "title": "Subject",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "canonical_url": {
            "title": "Canonical Url",
            "type": "string"
          },
          "body": {
            "title": "Body",
            "description": "Can be either HTML or markdown.",
            "type": "string"
          },
          "email_type": {
            "$ref": "#/components/schemas/EmailType"
          },
          "status": {
            "$ref": "#/components/schemas/EmailStatus"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "image": {
            "title": "Image",
            "type": "string"
          },
          "should_send_teaser": {
            "title": "Should Send Teaser",
            "type": "boolean"
          },
          "is_comments_disabled": {
            "title": "Is Comments Disabled",
            "type": "boolean"
          },
          "custom_teaser": {
            "title": "Custom Teaser",
            "type": "string"
          },
          "slug": {
            "title": "Slug",
            "type": "string"
          },
          "secondary_id": {
            "title": "Secondary Id",
            "type": "integer"
          },
          "filters": {
            "title": "Filters",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      },
      "History": {
        "title": "History",
        "type": "object",
        "properties": {
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "value": {
            "title": "Value",
            "type": "string"
          }
        },
        "required": ["creation_date", "value"]
      },
      "EmailEvent": {
        "title": "EmailEvent",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "subscriber_id": {
            "title": "Subscriber Id",
            "type": "string",
            "format": "uuid"
          },
          "subscriber_email": {
            "title": "Subscriber Email",
            "type": "string"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "subscriber_id",
          "subscriber_email",
          "creation_date",
          "metadata"
        ]
      },
      "EmailEventPage": {
        "title": "Page[EmailEvent]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailEvent"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": ["results", "count"]
      },
      "SurveyResponseCadence": {
        "title": "ResponseCadence",
        "description": "An enumeration.",
        "enum": ["once", "once_per_email"],
        "type": "string"
      },
      "SurveyStatus": {
        "title": "Status",
        "description": "An enumeration.",
        "enum": ["active", "inactive"],
        "type": "string"
      },
      "Survey": {
        "title": "Survey",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "identifier": {
            "title": "Identifier",
            "type": "string"
          },
          "question": {
            "title": "Question",
            "type": "string"
          },
          "response_count": {
            "title": "Response Count",
            "type": "integer"
          },
          "answers": {
            "title": "Answers",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "title": "Notes",
            "type": "string"
          },
          "response_cadence": {
            "$ref": "#/components/schemas/SurveyResponseCadence"
          },
          "status": {
            "$ref": "#/components/schemas/SurveyStatus"
          },
          "is_freeform_response_enabled": {
            "title": "Is Freeform Response Enabled",
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "identifier",
          "question",
          "response_count",
          "answers",
          "creation_date",
          "notes",
          "response_cadence",
          "status",
          "is_freeform_response_enabled"
        ]
      },
      "Response": {
        "title": "Response",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "subscriber_id": {
            "title": "Subscriber Id",
            "type": "string",
            "format": "uuid"
          },
          "subscriber_email": {
            "title": "Subscriber Email",
            "type": "string"
          },
          "answer": {
            "title": "Answer",
            "type": "string"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "survey_id": {
            "title": "Survey Id",
            "type": "string",
            "format": "uuid"
          },
          "survey": {
            "$ref": "#/components/schemas/Survey"
          }
        },
        "required": [
          "id",
          "subscriber_id",
          "subscriber_email",
          "answer",
          "creation_date",
          "survey_id"
        ]
      },
      "ResponsePage": {
        "title": "Page[Response]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Response"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": ["results", "count"]
      },
      "Webmention": {
        "title": "Webmention",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "url": {
            "title": "Url",
            "type": "string"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": ["id", "url", "creation_date"]
      },
      "WebmentionPage": {
        "title": "Page[Webmention]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Webmention"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": ["results", "count"]
      },
      "SendDraftInput": {
        "title": "SendDraftInput",
        "type": "object",
        "properties": {
          "subscribers": {
            "title": "Subscribers",
            "description": "A list of subscriber ids to which to send the email.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "recipients": {
            "title": "Recipients",
            "description": "A list of email addresses to send the email to.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "SubscriberType": {
        "title": "Type",
        "description": "Represents the state of a subscriber and what emails they\nshould or should not be receiving. This type is meant to be fully expressive\nso as to consolidate the logic of determining what emails a subscriber should\nreceive into a single place.",
        "enum": [
          "regular",
          "premium",
          "churning",
          "past_due",
          "gifted",
          "unpaid",
          "churned",
          "unactivated",
          "unsubscribed",
          "malformed",
          "complained",
          "spammy",
          "removed",
          "trialed",
          "disabled",
          "paused",
          "disposable"
        ],
        "type": "string"
      },
      "SubscriberSource": {
        "title": "Source",
        "description": "Represents the original provenance of a subscriber. This value is not exposed\nto subscribers; it's only used for internal tracking purposes and governs some\nof the behavior of the subscriber (i.e. whether or not to require double\nopt-in.)",
        "enum": ["api", "import", "organic", "user", "admin"],
        "type": "string"
      },
      "StripeCoupon": {
        "title": "StripeCoupon",
        "type": "object",
        "properties": {
          "coupon_id": {
            "title": "Coupon Id",
            "type": "string"
          },
          "percent_off": {
            "title": "Percent Off",
            "type": "string"
          },
          "amount_off": {
            "title": "Amount Off",
            "type": "integer"
          },
          "name": {
            "title": "Name",
            "type": "string"
          }
        },
        "required": ["coupon_id"]
      },
      "Transition": {
        "title": "Transition",
        "type": "object",
        "properties": {
          "date": {
            "title": "Date",
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "$ref": "#/components/schemas/SubscriberType"
          }
        },
        "required": ["date", "type"]
      },
      "Subscriber": {
        "title": "Subscriber",
        "description": "Subscribers are the main way you collect email addresses and\nrecipients on Buttondown. They're what you see on your\n[subscribers page](https://buttondown.email/subscribers).",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "title": "Email",
            "type": "string"
          },
          "notes": {
            "title": "Notes",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "referrer_url": {
            "title": "Referrer Url",
            "default": "",
            "type": "string"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "secondary_id": {
            "title": "Secondary Id",
            "type": "integer"
          },
          "subscriber_type": {
            "$ref": "#/components/schemas/SubscriberType"
          },
          "source": {
            "$ref": "#/components/schemas/SubscriberSource"
          },
          "utm_campaign": {
            "title": "Utm Campaign",
            "type": "string"
          },
          "utm_medium": {
            "title": "Utm Medium",
            "type": "string"
          },
          "utm_source": {
            "title": "Utm Source",
            "type": "string"
          },
          "referral_code": {
            "title": "Referral Code",
            "type": "string"
          },
          "avatar_url": {
            "title": "Avatar Url",
            "type": "string"
          },
          "stripe_customer_id": {
            "title": "Stripe Customer Id",
            "type": "string"
          },
          "stripe_coupon": {
            "$ref": "#/components/schemas/StripeCoupon"
          },
          "unsubscription_date": {
            "title": "Unsubscription Date",
            "type": "string",
            "format": "date-time"
          },
          "churn_date": {
            "title": "Churn Date",
            "type": "string",
            "format": "date-time"
          },
          "unsubscription_reason": {
            "title": "Unsubscription Reason",
            "type": "string"
          },
          "transitions": {
            "title": "Transitions",
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transition"
            }
          },
          "ip_address": {
            "title": "Ip Address",
            "type": "string"
          },
          "last_open_date": {
            "title": "Last Open Date",
            "type": "string",
            "format": "date-time"
          },
          "last_click_date": {
            "title": "Last Click Date",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "email",
          "notes",
          "metadata",
          "tags",
          "creation_date",
          "secondary_id",
          "subscriber_type",
          "source",
          "utm_campaign",
          "utm_medium",
          "utm_source",
          "referral_code"
        ]
      },
      "CreateSubscriberErrorCode": {
        "title": "CreateSubscriberErrorCode",
        "description": "Represents the type of error that occurred when creating a subscriber.\n\nHuman-readable error messages are provided in the `detail` field of the response;\nthese values are meant to be parseable by code or client logic.",
        "enum": [
          "email_already_exists",
          "email_invalid",
          "tag_invalid",
          "metadata_invalid"
        ],
        "type": "string"
      },
      "ErrorMessage_CreateSubscriberErrorCode_": {
        "title": "ErrorMessage[CreateSubscriberErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/CreateSubscriberErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": ["code", "detail"]
      },
      "SubscriberInput": {
        "title": "SubscriberInput",
        "type": "object",
        "properties": {
          "email": {
            "title": "Email",
            "type": "string"
          },
          "notes": {
            "title": "Notes",
            "default": "",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tags": {
            "title": "Tags",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "referrer_url": {
            "title": "Referrer Url",
            "default": "",
            "type": "string"
          },
          "utm_campaign": {
            "title": "Utm Campaign",
            "default": "",
            "type": "string"
          },
          "utm_medium": {
            "title": "Utm Medium",
            "default": "",
            "type": "string"
          },
          "utm_source": {
            "title": "Utm Source",
            "default": "",
            "type": "string"
          },
          "referring_subscriber_id": {
            "title": "Referring Subscriber Id",
            "type": "string",
            "format": "uuid"
          },
          "subscriber_type": {
            "$ref": "#/components/schemas/SubscriberType"
          }
        },
        "required": ["email"]
      },
      "SubscriberPage": {
        "title": "Page[Subscriber]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscriber"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": ["results", "count"]
      },
      "ListSubscribersErrorCode": {
        "title": "ListSubscribersErrorCode",
        "description": "Represents the type of error that occurred when listing subscribers.\n\nHuman-readable error messages are provided in the `detail` field of the response;\nthese values are meant to be parseable by code or client logic.",
        "enum": ["invalid_tag", "date_invalid"],
        "type": "string"
      },
      "ErrorMessage_ListSubscribersErrorCode_": {
        "title": "ErrorMessage[ListSubscribersErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/ListSubscribersErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": ["code", "detail"]
      },
      "UpdateSubscriberErrorCode": {
        "title": "UpdateSubscriberErrorCode",
        "description": "Represents the type of error that occurred when updating a subscriber.\n\nHuman-readable error messages are provided in the `detail` field of the response;\nthese values are meant to be parseable by code or client logic.",
        "enum": [
          "email_already_exists",
          "email_invalid",
          "email_has_been_changed_too_many_times",
          "subscriber_type_invalid",
          "tag_invalid"
        ],
        "type": "string"
      },
      "ErrorMessage_UpdateSubscriberErrorCode_": {
        "title": "ErrorMessage[UpdateSubscriberErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/UpdateSubscriberErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": ["code", "detail"]
      },
      "SubscriberUpdateInput": {
        "title": "SubscriberUpdateInput",
        "type": "object",
        "properties": {
          "email": {
            "title": "Email",
            "type": "string"
          },
          "notes": {
            "title": "Notes",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "tags": {
            "title": "Tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "referrer_url": {
            "title": "Referrer Url",
            "default": "",
            "type": "string"
          },
          "subscriber_type": {
            "$ref": "#/components/schemas/SubscriberType"
          },
          "unsubscription_reason": {
            "title": "Unsubscription Reason",
            "type": "string"
          }
        }
      },
      "Client": {
        "title": "Client",
        "type": "object",
        "properties": {
          "region": {
            "title": "Region",
            "type": "string"
          },
          "country": {
            "title": "Country",
            "type": "string"
          },
          "client_os": {
            "title": "Client Os",
            "type": "string"
          },
          "client_type": {
            "title": "Client Type",
            "type": "string"
          },
          "client_name": {
            "title": "Client Name",
            "type": "string"
          },
          "occurrences": {
            "title": "Occurrences",
            "type": "integer"
          }
        },
        "required": [
          "region",
          "country",
          "client_os",
          "client_type",
          "client_name",
          "occurrences"
        ]
      },
      "ClientPage": {
        "title": "Page[Client]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Client"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": ["results", "count"]
      },
      "ResponseInput": {
        "title": "ResponseInput",
        "type": "object",
        "properties": {
          "survey_id": {
            "title": "Survey Id",
            "type": "string",
            "format": "uuid"
          },
          "email_id": {
            "title": "Email Id",
            "type": "string"
          },
          "answer": {
            "title": "Answer",
            "type": "integer"
          }
        },
        "required": ["survey_id", "email_id", "answer"]
      },
      "AutomationAttemptStatus": {
        "title": "Status",
        "description": "An enumeration.",
        "enum": ["unprocessed", "processed", "failed", "pending", "skipped"],
        "type": "string"
      },
      "AutomationForSubscriber": {
        "title": "AutomationForSubscriber",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/AutomationAttemptStatus"
          },
          "automation_id": {
            "title": "Automation Id",
            "type": "string",
            "format": "uuid"
          },
          "execution_date": {
            "title": "Execution Date",
            "type": "string",
            "format": "date-time"
          },
          "actions": {
            "title": "Actions",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "id",
          "name",
          "status",
          "automation_id",
          "execution_date",
          "actions"
        ]
      },
      "AutomationForSubscriberPage": {
        "title": "Page[AutomationForSubscriber]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutomationForSubscriber"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": ["results", "count"]
      },
      "EmailEventForSubscriber": {
        "title": "EmailEventForSubscriber",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "email_id": {
            "title": "Email Id",
            "type": "string",
            "format": "uuid"
          },
          "email_subject": {
            "title": "Email Subject",
            "type": "string"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "event_type": {
            "title": "Event Type",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "email_subject",
          "creation_date",
          "event_type",
          "metadata"
        ]
      },
      "EmailEventForSubscriberPage": {
        "title": "Page[EmailEventForSubscriber]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailEventForSubscriber"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": ["results", "count"]
      },
      "StripeSubscription": {
        "title": "StripeSubscription",
        "type": "object",
        "properties": {
          "subscription_id": {
            "title": "Subscription Id",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "ending_date": {
            "title": "Ending Date",
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "title": "Amount",
            "type": "integer"
          },
          "currency": {
            "title": "Currency",
            "type": "string"
          },
          "cadence": {
            "title": "Cadence",
            "type": "string"
          },
          "status": {
            "title": "Status",
            "type": "string"
          }
        },
        "required": [
          "subscription_id",
          "url",
          "creation_date",
          "amount",
          "currency",
          "cadence",
          "status"
        ]
      },
      "StripeSubscriptionPage": {
        "title": "Page[StripeSubscription]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StripeSubscription"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": ["results", "count"]
      },
      "Newsletter": {
        "title": "Newsletter",
        "description": "You will likely not need to interact with your newsletter settings\nprogrammatically, but if you do, this is the endpoint for you. You can\ncreate, update, and list newsletters via the API; this is ideal for\nintegrating with Buttondown as a headless email or newsletter provider\n(e.g. for a SaaS product.)",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "username": {
            "title": "Username",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "api_key": {
            "title": "Api Key",
            "type": "string",
            "format": "uuid"
          },
          "tint_color": {
            "title": "Tint Color",
            "default": "#0069FF",
            "type": "string"
          },
          "from_name": {
            "title": "From Name",
            "default": "",
            "type": "string"
          },
          "header": {
            "title": "Header",
            "default": "",
            "type": "string"
          },
          "footer": {
            "title": "Footer",
            "default": "",
            "type": "string"
          },
          "domain": {
            "title": "Domain",
            "default": "",
            "type": "string"
          },
          "email_domain": {
            "title": "Email Domain",
            "default": "",
            "type": "string"
          },
          "enabled_features": {
            "title": "Enabled Features",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "custom_email_template": {
            "title": "Custom Email Template",
            "type": "string"
          }
        },
        "required": [
          "id",
          "username",
          "name",
          "description",
          "creation_date",
          "api_key"
        ]
      },
      "NewsletterPage": {
        "title": "Page[Newsletter]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Newsletter"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": ["results", "count"]
      },
      "CreateNewsletterErrorCode": {
        "title": "CreateNewsletterErrorCode",
        "description": "Represents the type of error that occurred when creating a newsletter.\n\nHuman-readable error messages are provided in the `detail` field of the response;\nthese values are meant to be parseable by code or client logic.",
        "enum": ["username_already_exists", "username_invalid"],
        "type": "string"
      },
      "ErrorMessage_CreateNewsletterErrorCode_": {
        "title": "ErrorMessage[CreateNewsletterErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/CreateNewsletterErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": ["code", "detail"]
      },
      "NewsletterInput": {
        "title": "NewsletterInput",
        "type": "object",
        "properties": {
          "username": {
            "title": "Username",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "tint_color": {
            "title": "Tint Color",
            "default": "#0069FF",
            "type": "string"
          },
          "from_name": {
            "title": "From Name",
            "default": "",
            "type": "string"
          },
          "header": {
            "title": "Header",
            "default": "",
            "type": "string"
          },
          "footer": {
            "title": "Footer",
            "default": "",
            "type": "string"
          },
          "domain": {
            "title": "Domain",
            "default": "",
            "type": "string"
          },
          "email_domain": {
            "title": "Email Domain",
            "default": "",
            "type": "string"
          },
          "enabled_features": {
            "title": "Enabled Features",
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "custom_email_template": {
            "title": "Custom Email Template",
            "type": "string"
          }
        },
        "required": ["username", "name", "description"]
      },
      "NewsletterUpdateInput": {
        "title": "NewsletterUpdateInput",
        "type": "object",
        "properties": {
          "username": {
            "title": "Username",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "tint_color": {
            "title": "Tint Color",
            "type": "string"
          },
          "from_name": {
            "title": "From Name",
            "type": "string"
          },
          "header": {
            "title": "Header",
            "type": "string"
          },
          "footer": {
            "title": "Footer",
            "type": "string"
          },
          "domain": {
            "title": "Domain",
            "type": "string"
          },
          "email_domain": {
            "title": "Email Domain",
            "type": "string"
          },
          "enabled_features": {
            "title": "Enabled Features",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "custom_email_template": {
            "title": "Custom Email Template",
            "type": "string"
          }
        }
      },
      "BulkActionStatus": {
        "title": "Status",
        "description": "Represents the status of a bulk action.\n\nNo action is required to move from one state or another; Buttondown\ninternally handles the transitions, and exposing the status is for\nobservability purposes only.",
        "enum": ["not_started", "in_progress", "processed", "failed"],
        "type": "string"
      },
      "BulkActionType": {
        "title": "Type",
        "description": "Represents the action being performed on a bulk of objects.\n\n(Not to be coy, but these names should be self-explanatory.)",
        "enum": [
          "apply_tags",
          "apply_metadata",
          "ban_subscribers",
          "delete_emails",
          "delete_subscribers",
          "delete_tags",
          "delete_surveys",
          "gift_subscribers",
          "reactivate_subscribers",
          "mark_subscribers_as_not_spammy",
          "replay_events",
          "resubscribe_subscribers",
          "send_emails",
          "send_reminders",
          "update_email_types",
          "unsubscribe_subscribers",
          "delete_comments",
          "update_survey_statuses"
        ],
        "type": "string"
      },
      "BulkAction": {
        "title": "BulkAction",
        "description": "A bulk action represents, well, a bulk action. It is used to perform\nactions on a large number of objects at once. For example, you can\nuse it to delete a large number of emails, or to unsubscribe a large\nnumber of subscribers. The actions within a bulk action are processed\nserially by Buttondown; this should be considered an ergonomic way to\nbatch API calls across the network rather than a net-new piece of functionality\nin of itself.",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/BulkActionStatus"
          },
          "type": {
            "$ref": "#/components/schemas/BulkActionType"
          },
          "completion_date": {
            "title": "Completion Date",
            "type": "string",
            "format": "date-time"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "object"
                }
              ]
            }
          }
        },
        "required": ["id", "creation_date", "status", "type", "metadata"]
      },
      "BulkActionInput": {
        "title": "BulkActionInput",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/BulkActionType"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "object"
                }
              ]
            }
          }
        },
        "required": ["type", "metadata"]
      },
      "ExternalFeedAutomationStatus": {
        "title": "Status",
        "description": "Represents the status of the automation, and whether or not it is active. Inactive automations will not be processed.",
        "enum": ["active", "inactive"],
        "type": "string"
      },
      "ExternalFeedAutomationBehavior": {
        "title": "Behavior",
        "description": "An enumeration.",
        "enum": ["draft", "emails"],
        "type": "string"
      },
      "ExternalFeedAutomationCadence": {
        "title": "Cadence",
        "description": "An enumeration.",
        "enum": ["every", "daily", "weekly", "monthly"],
        "type": "string"
      },
      "ExternalFeed": {
        "title": "ExternalFeed",
        "description": "An automation is a one-to-one mapping between an external RSS feed and an action\nto be performed when new items are detected in that feed. Right now, Buttondown offers\ntwo actions:\n\n- Send an email\n- Create an email but save it as a draft to be sent out manually\n\nThe automation is configured with a cadence, which is the frequency at which the\nautomation will be run. The cadence can be one of the following:\n\n- Run the automation every time a new item is detected in the feed\n- Run the automation once per week\n- Run the automation once per month",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "last_checked_date": {
            "title": "Last Checked Date",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/ExternalFeedAutomationStatus"
          },
          "behavior": {
            "$ref": "#/components/schemas/ExternalFeedAutomationBehavior"
          },
          "cadence": {
            "$ref": "#/components/schemas/ExternalFeedAutomationCadence"
          },
          "cadence_metadata": {
            "title": "Cadence Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "included_tags": {
            "title": "Included Tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "title": "Url",
            "type": "string"
          },
          "subject": {
            "title": "Subject",
            "type": "string"
          },
          "body": {
            "title": "Body",
            "type": "string"
          },
          "label": {
            "title": "Label",
            "type": "string"
          }
        },
        "required": [
          "id",
          "creation_date",
          "status",
          "behavior",
          "cadence",
          "cadence_metadata",
          "included_tags",
          "url",
          "subject",
          "body",
          "label"
        ]
      },
      "ExternalFeedInput": {
        "title": "ExternalFeedInput",
        "type": "object",
        "properties": {
          "url": {
            "title": "Url",
            "type": "string"
          },
          "behavior": {
            "$ref": "#/components/schemas/ExternalFeedAutomationBehavior"
          },
          "cadence": {
            "$ref": "#/components/schemas/ExternalFeedAutomationCadence"
          },
          "cadence_metadata": {
            "title": "Cadence Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "included_tags": {
            "title": "Included Tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subject": {
            "title": "Subject",
            "type": "string"
          },
          "body": {
            "title": "Body",
            "type": "string"
          },
          "label": {
            "title": "Label",
            "default": "",
            "type": "string"
          }
        },
        "required": [
          "url",
          "behavior",
          "cadence",
          "cadence_metadata",
          "included_tags",
          "subject",
          "body"
        ]
      },
      "ExternalFeedPage": {
        "title": "Page[ExternalFeed]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalFeed"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": ["results", "count"]
      },
      "ExternalFeedUpdateInput": {
        "title": "ExternalFeedUpdateInput",
        "type": "object",
        "properties": {
          "behavior": {
            "$ref": "#/components/schemas/ExternalFeedAutomationBehavior"
          },
          "cadence": {
            "$ref": "#/components/schemas/ExternalFeedAutomationCadence"
          },
          "cadence_metadata": {
            "title": "Cadence Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "included_tags": {
            "title": "Included Tags",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subject": {
            "title": "Subject",
            "type": "string"
          },
          "body": {
            "title": "Body",
            "type": "string"
          },
          "label": {
            "title": "Label",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ExternalFeedAutomationStatus"
          }
        },
        "required": [
          "behavior",
          "cadence",
          "cadence_metadata",
          "included_tags",
          "subject",
          "body",
          "status"
        ]
      },
      "EmptyMessage": {
        "title": "EmptyMessage",
        "type": "object",
        "properties": {}
      },
      "ExternalFeedItemStatus": {
        "title": "Status",
        "description": "The status of a given item (meaning a distinct URL) within an RSS feed.",
        "enum": [
          "unprocessed",
          "irrelevant",
          "errored",
          "skipped",
          "queued",
          "processed"
        ],
        "type": "string"
      },
      "ExternalFeedItem": {
        "title": "ExternalFeedItem",
        "description": "An external feed item is a single item in an external RSS feed. It is created\nautomatically by Buttondown when a new item is detected in an external feed. External feed\nitems are immutable and cannot be modified or deleted.",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/ExternalFeedItemStatus"
          },
          "url": {
            "title": "Url",
            "type": "string"
          },
          "publish_date": {
            "title": "Publish Date",
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          },
          "author": {
            "title": "Author",
            "type": "string"
          },
          "email": {
            "title": "Email",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "id",
          "creation_date",
          "status",
          "url",
          "publish_date",
          "title",
          "description",
          "content",
          "author"
        ]
      },
      "ExternalFeedItemPage": {
        "title": "Page[ExternalFeedItem]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalFeedItem"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": ["results", "count"]
      },
      "AutomationStatus": {
        "title": "Status",
        "description": "An enumeration.",
        "enum": ["active", "inactive"],
        "type": "string"
      },
      "ExternalEventType": {
        "title": "Type",
        "description": "Various types of events that are recorded by Buttondown, both in terms of exogenous systems\nlike Stripe and Memberful, and endogenous ones like email opens and clicks. (In general, if anything\nimportant ever happens that could be relevant to your newsletter, we have an event type for it!)\n\nThese event types power lots of things within Buttondown. They're used to trigger automations, webhooks,\nand analytics.\n\n(Note that Buttondown also has a different thing we call \"events\"; those are `EmailEvents` and are used\nfor tracking aggregate details about an email. Alas, we shouldn't have used the term \"event\" for two different\nthings, but it's too late to go back now!)",
        "enum": [
          "subscriber.created",
          "subscriber.unsubscribed",
          "subscriber.changed_email",
          "subscriber.confirmed",
          "subscriber.trial_started",
          "subscriber.trial_ended",
          "subscriber.type.changed",
          "subscriber.tags.changed",
          "subscriber.clicked",
          "subscriber.opened",
          "subscriber.paid",
          "subscriber.churned",
          "subscriber.updated",
          "subscriber.deleted",
          "subscriber.viewed_checkout_page",
          "subscriber.replied",
          "subscriber.paused",
          "subscriber.resumed",
          "subscriber.responded_to_survey",
          "subscriber.referred",
          "subscriber.referred.paid",
          "subscriber.commented",
          "email.created",
          "email.sent",
          "email.updated",
          "email.deleted",
          "email.status.changed",
          "scheduled_email.converted",
          "mention.created",
          "advertising_slot.purchased",
          "stripe.checkout.session.completed",
          "stripe.subscription.activated",
          "stripe.subscription.deactivated",
          "stripe.customer.updated",
          "memberful.subscription.created",
          "memberful.subscription.deleted",
          "memberful.member.updated"
        ],
        "type": "string"
      },
      "AutomationActionType": {
        "title": "ActionType",
        "description": "The action that is triggered when the automation is successfully run.",
        "enum": [
          "add_tags",
          "remove_tags",
          "send_email",
          "add_metadata",
          "change_email_address",
          "gift_premium_subscription",
          "ungift_premium_subscription",
          "send_discord_invitation",
          "send_github_invitation",
          "create_subscriber",
          "unsubscribe_subscriber",
          "shopify_unsubscribe",
          "send_notification",
          "forward_reply",
          "create_linkedin_post"
        ],
        "type": "string"
      },
      "Action": {
        "title": "Action",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AutomationActionType"
          },
          "metadata": {
            "title": "Metadata",
            "type": "object"
          }
        },
        "required": ["type", "metadata"]
      },
      "Operator": {
        "title": "Operator",
        "description": "An enumeration.",
        "enum": [
          "equals",
          "not_equals",
          "contains",
          "not_contains",
          "is_empty",
          "is_not_empty",
          "greater_than",
          "less_than"
        ],
        "type": "string"
      },
      "Filter": {
        "title": "Filter",
        "type": "object",
        "properties": {
          "field": {
            "title": "Field",
            "type": "string"
          },
          "operator": {
            "$ref": "#/components/schemas/Operator"
          },
          "value": {
            "title": "Value",
            "type": "string"
          }
        },
        "required": ["field", "operator", "value"]
      },
      "Automation": {
        "title": "Automation",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/AutomationStatus"
          },
          "trigger": {
            "$ref": "#/components/schemas/ExternalEventType"
          },
          "timing": {
            "title": "Timing",
            "type": "object"
          },
          "actions": {
            "title": "Actions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Action"
            }
          },
          "filters": {
            "title": "Filters",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            }
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "creation_date",
          "name",
          "status",
          "trigger",
          "timing",
          "actions",
          "filters",
          "metadata"
        ]
      },
      "AutomationPage": {
        "title": "Page[Automation]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Automation"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": ["results", "count"]
      },
      "AutomationCreationErrorCode": {
        "title": "AutomationCreationErrorCode",
        "description": "Represents the type of error that occurred when creating an automation.\n\nHuman-readable error messages are provided in the `detail` field of the response;\nthese values are meant to be parseable by code or client logic.",
        "enum": [
          "delay_invalid",
          "filter_invalid__tag",
          "filter_invalid",
          "action_invalid"
        ],
        "type": "string"
      },
      "ErrorMessage_AutomationCreationErrorCode_": {
        "title": "ErrorMessage[AutomationCreationErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/AutomationCreationErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": ["code", "detail"]
      },
      "AutomationInput": {
        "title": "AutomationInput",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "trigger": {
            "$ref": "#/components/schemas/ExternalEventType"
          },
          "timing": {
            "title": "Timing",
            "type": "object"
          },
          "actions": {
            "title": "Actions",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "filters": {
            "title": "Filters",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": ["name", "trigger", "timing", "actions", "filters"]
      },
      "SubscriberForAutomation": {
        "title": "SubscriberForAutomation",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "$ref": "#/components/schemas/AutomationAttemptStatus"
          },
          "subscriber_id": {
            "title": "Subscriber Id",
            "type": "string"
          },
          "subscriber": {
            "$ref": "#/components/schemas/Subscriber"
          }
        },
        "required": ["id", "status"]
      },
      "SubscriberForAutomationPage": {
        "title": "Page[SubscriberForAutomation]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriberForAutomation"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": ["results", "count"]
      },
      "AutomationUpdateInput": {
        "title": "AutomationUpdateInput",
        "type": "object",
        "properties": {
          "name": {
            "title": "Name",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/AutomationStatus"
          },
          "trigger": {
            "$ref": "#/components/schemas/ExternalEventType"
          },
          "timing": {
            "title": "Timing",
            "type": "object"
          },
          "actions": {
            "title": "Actions",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "filters": {
            "title": "Filters",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "metadata": {
            "title": "Metadata",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "InvitationStatus": {
        "title": "Status",
        "description": "An enumeration.",
        "enum": ["pending", "accepted", "declined", "revoked"],
        "type": "string"
      },
      "AccessLevel": {
        "title": "AccessLevel",
        "description": "An enumeration.",
        "enum": ["none", "read", "write"],
        "type": "string"
      },
      "Permissions": {
        "title": "Permissions",
        "type": "object",
        "properties": {
          "subscriber": {
            "default": "none",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccessLevel"
              }
            ]
          },
          "email": {
            "default": "none",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccessLevel"
              }
            ]
          },
          "styling": {
            "default": "none",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccessLevel"
              }
            ]
          },
          "administrivia": {
            "default": "none",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccessLevel"
              }
            ]
          },
          "automations": {
            "default": "none",
            "allOf": [
              {
                "$ref": "#/components/schemas/AccessLevel"
              }
            ]
          }
        }
      },
      "User": {
        "title": "User",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/InvitationStatus"
          },
          "permissions": {
            "$ref": "#/components/schemas/Permissions"
          },
          "email_address": {
            "title": "Email Address",
            "type": "string"
          }
        },
        "required": [
          "id",
          "creation_date",
          "status",
          "permissions",
          "email_address"
        ]
      },
      "Failure": {
        "title": "Failure",
        "description": "An enumeration.",
        "enum": ["email_already_exists"],
        "type": "string"
      },
      "ErrorMessage_Failure_": {
        "title": "ErrorMessage[Failure]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/Failure"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": ["code", "detail"]
      },
      "UserInput": {
        "title": "UserInput",
        "type": "object",
        "properties": {
          "permissions": {
            "$ref": "#/components/schemas/Permissions"
          },
          "email_address": {
            "title": "Email Address",
            "type": "string"
          }
        },
        "required": ["permissions", "email_address"]
      },
      "UserPage": {
        "title": "Page[User]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": ["results", "count"]
      },
      "UserUpdateInput": {
        "title": "UserUpdateInput",
        "type": "object",
        "properties": {
          "permissions": {
            "title": "Permissions",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": ["permissions"]
      },
      "Cadence": {
        "title": "Cadence",
        "description": "An enumeration.",
        "enum": ["year", "month", "one-time"],
        "type": "string"
      },
      "Product": {
        "title": "Product",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "product_id": {
            "title": "Product Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string"
          }
        },
        "required": ["id", "product_id", "name", "creation_date"]
      },
      "Price": {
        "title": "Price",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "amount": {
            "title": "Amount",
            "type": "integer"
          },
          "style": {
            "title": "Style",
            "enum": ["pay-what-you-want", "fixed"],
            "type": "string"
          },
          "currency": {
            "title": "Currency",
            "type": "string"
          },
          "cadence": {
            "$ref": "#/components/schemas/Cadence"
          },
          "product_id": {
            "title": "Product Id",
            "type": "string"
          },
          "product": {
            "$ref": "#/components/schemas/Product"
          }
        },
        "required": ["id", "style", "currency", "cadence", "product_id"]
      },
      "PricePage": {
        "title": "Page[Price]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Price"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": ["results", "count"]
      },
      "ListPricesErrorCode": {
        "title": "ListPricesErrorCode",
        "description": "Represents the type of error that occurred when listing a price.\n\nHuman-readable error messages are provided in the `detail` field of the response;\nthese values are meant to be parseable by code or client logic.",
        "enum": ["paid_subscriptions_uninitialized"],
        "type": "string"
      },
      "ErrorMessage_ListPricesErrorCode_": {
        "title": "ErrorMessage[ListPricesErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/ListPricesErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": ["code", "detail"]
      },
      "CreatePriceErrorCode": {
        "title": "CreatePriceErrorCode",
        "description": "Represents the type of error that occurred when listing a price.\n\nHuman-readable error messages are provided in the `detail` field of the response;\nthese values are meant to be parseable by code or client logic.",
        "enum": ["paid_subscriptions_uninitialized"],
        "type": "string"
      },
      "ErrorMessage_CreatePriceErrorCode_": {
        "title": "ErrorMessage[CreatePriceErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/CreatePriceErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": ["code", "detail"]
      },
      "PriceInput": {
        "title": "PriceInput",
        "type": "object",
        "properties": {
          "style": {
            "title": "Style",
            "enum": ["pay-what-you-want", "fixed"],
            "type": "string"
          },
          "amount": {
            "title": "Amount",
            "type": "integer"
          },
          "currency": {
            "title": "Currency",
            "type": "string"
          },
          "cadence": {
            "$ref": "#/components/schemas/Cadence"
          }
        },
        "required": ["style", "currency", "cadence"]
      },
      "StripeCouponPage": {
        "title": "Page[StripeCoupon]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StripeCoupon"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": ["results", "count"]
      },
      "CreateSurveyErrorCode": {
        "title": "CreateSurveyErrorCode",
        "description": "Represents the type of error that occurred when creating a survey.\n\nHuman-readable error messages are provided in the `detail` field of the response;\nthese values are meant to be parseable by code or client logic.",
        "enum": ["identifier_already_exists"],
        "type": "string"
      },
      "ErrorMessage_CreateSurveyErrorCode_": {
        "title": "ErrorMessage[CreateSurveyErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/CreateSurveyErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": ["code", "detail"]
      },
      "SurveyInput": {
        "title": "SurveyInput",
        "type": "object",
        "properties": {
          "identifier": {
            "title": "Identifier",
            "type": "string"
          },
          "question": {
            "title": "Question",
            "type": "string"
          },
          "answers": {
            "title": "Answers",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "notes": {
            "title": "Notes",
            "default": "",
            "type": "string"
          },
          "is_freeform_response_enabled": {
            "title": "Is Freeform Response Enabled",
            "default": false,
            "type": "boolean"
          },
          "response_cadence": {
            "default": "once",
            "allOf": [
              {
                "$ref": "#/components/schemas/SurveyResponseCadence"
              }
            ]
          }
        },
        "required": ["identifier", "question", "answers"]
      },
      "SurveyPage": {
        "title": "Page[Survey]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Survey"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": ["results", "count"]
      },
      "UpdateSurveyErrorCode": {
        "title": "UpdateSurveyErrorCode",
        "description": "An enumeration.",
        "enum": ["answers_empty"],
        "type": "string"
      },
      "ErrorMessage_UpdateSurveyErrorCode_": {
        "title": "ErrorMessage[UpdateSurveyErrorCode]",
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/UpdateSurveyErrorCode"
          },
          "detail": {
            "title": "Detail",
            "type": "string"
          },
          "metadata": {
            "title": "Metadata",
            "default": {},
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": ["code", "detail"]
      },
      "SurveyUpdateInput": {
        "title": "SurveyUpdateInput",
        "type": "object",
        "properties": {
          "notes": {
            "title": "Notes",
            "type": "string"
          },
          "answers": {
            "title": "Answers",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "response_cadence": {
            "$ref": "#/components/schemas/SurveyResponseCadence"
          },
          "status": {
            "$ref": "#/components/schemas/SurveyStatus"
          },
          "is_freeform_response_enabled": {
            "title": "Is Freeform Response Enabled",
            "default": false,
            "type": "boolean"
          }
        }
      },
      "APIRequestSource": {
        "title": "Source",
        "description": "An enumeration.",
        "enum": ["api", "app", "carrd", "zapier", "cli"],
        "type": "string"
      },
      "APIRequestDetail": {
        "title": "APIRequestDetail",
        "description": "Represents a request to the API (api.buttondown.email).",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "status_code": {
            "title": "Status Code",
            "type": "integer"
          },
          "path": {
            "title": "Path",
            "type": "string"
          },
          "method": {
            "title": "Method",
            "type": "string"
          },
          "request_data": {
            "title": "Request Data",
            "type": "string"
          },
          "response_data": {
            "title": "Response Data",
            "type": "string"
          },
          "ip_address": {
            "title": "Ip Address",
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/APIRequestSource"
          }
        },
        "required": [
          "id",
          "creation_date",
          "status_code",
          "path",
          "method",
          "request_data",
          "response_data",
          "ip_address",
          "source"
        ]
      },
      "APIRequest": {
        "title": "APIRequest",
        "description": "Represents a request to the API (api.buttondown.email).",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "status_code": {
            "title": "Status Code",
            "type": "integer"
          },
          "path": {
            "title": "Path",
            "type": "string"
          },
          "method": {
            "title": "Method",
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/APIRequestSource"
          }
        },
        "required": [
          "id",
          "creation_date",
          "status_code",
          "path",
          "method",
          "source"
        ]
      },
      "APIRequestPage": {
        "title": "Page[APIRequest]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/APIRequest"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": ["results", "count"]
      },
      "AdvertisingSKUStatus": {
        "title": "Status",
        "description": "An enumeration.",
        "enum": ["active", "inactive"],
        "type": "string"
      },
      "AdvertisingSlotStatus": {
        "title": "Status",
        "description": "An enumeration.",
        "enum": ["open", "sold", "finalized", "executed", "expired"],
        "type": "string"
      },
      "AdvertisingSlot": {
        "title": "AdvertisingSlot",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "date": {
            "title": "Date",
            "type": "string",
            "format": "date"
          },
          "status": {
            "$ref": "#/components/schemas/AdvertisingSlotStatus"
          },
          "invoice_url": {
            "title": "Invoice Url",
            "type": "string"
          }
        },
        "required": ["id", "date", "status"]
      },
      "AdvertisingUnit": {
        "title": "AdvertisingUnit",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/AdvertisingSKUStatus"
          },
          "slots": {
            "title": "Slots",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdvertisingSlot"
            }
          },
          "title": {
            "title": "Title",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "behavior": {
            "title": "Behavior",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          },
          "price": {
            "title": "Price",
            "type": "integer"
          }
        },
        "required": [
          "id",
          "creation_date",
          "status",
          "slots",
          "title",
          "description",
          "behavior",
          "url"
        ]
      },
      "AdvertisingUnitPage": {
        "title": "Page[AdvertisingUnit]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdvertisingUnit"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": ["results", "count"]
      },
      "AdvertisingUnitInput": {
        "title": "AdvertisingUnitInput",
        "type": "object",
        "properties": {
          "title": {
            "title": "Title",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "behavior": {
            "title": "Behavior",
            "default": "",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "default": "",
            "type": "string"
          },
          "price": {
            "title": "Price",
            "type": "integer"
          }
        }
      },
      "AdvertisingUnitUpdateInput": {
        "title": "AdvertisingUnitUpdateInput",
        "type": "object",
        "properties": {
          "title": {
            "title": "Title",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "dates": {
            "title": "Dates",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "behavior": {
            "title": "Behavior",
            "type": "string"
          },
          "url": {
            "title": "Url",
            "type": "string"
          },
          "price": {
            "title": "Price",
            "type": "integer"
          }
        },
        "required": ["dates"]
      },
      "Webhook": {
        "title": "Webhook",
        "description": "Webhooks are used to notify external services of events that occur in the\nsystem. For example, when a newsletter is sent, a webhook can be used to\nnotify an external service that the newsletter has been sent.",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "event_type": {
            "$ref": "#/components/schemas/ExternalEventType"
          },
          "url": {
            "title": "Url",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        },
        "required": ["id", "creation_date", "event_type", "url"]
      },
      "WebhookInput": {
        "title": "WebhookInput",
        "type": "object",
        "properties": {
          "event_type": {
            "$ref": "#/components/schemas/ExternalEventType"
          },
          "url": {
            "title": "Url",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          }
        },
        "required": ["event_type", "url"]
      },
      "WebhookPage": {
        "title": "Page[Webhook]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Webhook"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": ["results", "count"]
      },
      "Comment": {
        "title": "Comment",
        "description": "Comments are a way for subscribers to interact with newsletters. They're a way to\nprovide feedback, ask questions, and generally engage with the content of an email.\nComments exist in a tree structure; comments that reply to other comments are\nconsidered \"children\" of the parent comment.",
        "type": "object",
        "properties": {
          "id": {
            "title": "Id",
            "type": "string",
            "format": "uuid"
          },
          "email_id": {
            "title": "Email Id",
            "type": "string",
            "format": "uuid"
          },
          "subscriber_id": {
            "title": "Subscriber Id",
            "type": "string",
            "format": "uuid"
          },
          "parent_id": {
            "title": "Parent Id",
            "type": "string",
            "format": "uuid"
          },
          "text": {
            "title": "Text",
            "type": "string"
          },
          "creation_date": {
            "title": "Creation Date",
            "type": "string",
            "format": "date-time"
          },
          "subscriber": {
            "$ref": "#/components/schemas/Subscriber"
          }
        },
        "required": ["id", "email_id", "text", "creation_date"]
      },
      "CommentPage": {
        "title": "Page[Comment]",
        "type": "object",
        "properties": {
          "results": {
            "title": "Results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "next": {
            "title": "Next",
            "type": "string"
          },
          "previous": {
            "title": "Previous",
            "type": "string"
          },
          "count": {
            "title": "Count",
            "type": "integer"
          }
        },
        "required": ["results", "count"]
      },
      "EmailExcludableField": {
        "type": "string",
        "enum": ["body"]
      }
    },
    "securitySchemes": {
      "AuthenticationRequirement": {
        "type": "http",
        "scheme": "token"
      },
      "GlobalAuth": {
        "type": "http",
        "scheme": "token"
      },
      "NewsletterIDKey": {
        "type": "http",
        "scheme": "token"
      }
    }
  }
}
