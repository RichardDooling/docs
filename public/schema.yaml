components:
  schemas:
    Email:
      properties:
        body:
          type: string
        email_type:
          enum:
          - public
          - private
          - premium
          - free
          - archival
          - hidden
          type: string
        excluded_tags:
          nullable: true
          type: object
        external_url:
          format: uri
          maxLength: 200
          pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4]\\\
            d|1\\d?\\d?|[1-9]\\d?)(?:\\.(?:0|25[0-5]|2[0-4]\\d|1\\d?\\d?|[1-9]\\d?)){3}|\\\
            [[0-9a-f:.]+\\]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1\
            -\uFFFF0-9])?(?:\\.(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1\
            -\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost))(?::\\d{1,5})?(?:[/?#][^\\\
            s]*)?\\z"
          type: string
        id:
          format: uuid
          readOnly: true
          type: string
        included_tags:
          nullable: true
          type: object
        metadata:
          nullable: true
          type: object
        publish_date:
          format: date-time
          nullable: true
          type: string
        secondary_id:
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
          type: integer
        slug:
          maxLength: 100
          nullable: true
          pattern: ^[-a-zA-Z0-9_]+\z
          type: string
        status:
          enum:
          - draft
          - about_to_send
          - scheduled
          - in_flight
          - deleted
          - errored
          - sent
          - imported
          type: string
        subject:
          type: string
      required:
      - subject
      - body
      type: object
    Export:
      properties:
        collections:
          items:
            enum:
            - subscribers
            - emails
            - scheduled_emails
            - drafts
            - unsubscribers
            - events
            - referrals
            type: string
          type: array
        completion_date:
          format: date-time
          nullable: true
          type: string
        creation_date:
          format: date-time
          readOnly: true
          type: string
        id:
          format: uuid
          readOnly: true
          type: string
        status:
          enum:
          - error
          - in_progress
          - not_started
          - ready
          type: string
        url:
          format: uri
          maxLength: 250
          nullable: true
          pattern: "^(?:[a-z0-9.+-]*)://(?:[^\\s:@/]+(?::[^\\s:@/]*)?@)?(?:(?:0|25[0-5]|2[0-4]\\\
            d|1\\d?\\d?|[1-9]\\d?)(?:\\.(?:0|25[0-5]|2[0-4]\\d|1\\d?\\d?|[1-9]\\d?)){3}|\\\
            [[0-9a-f:.]+\\]|([a-z\xA1-\uFFFF0-9](?:[a-z\xA1-\uFFFF0-9-]{0,61}[a-z\xA1\
            -\uFFFF0-9])?(?:\\.(?!-)[a-z\xA1-\uFFFF0-9-]{1,63}(?<!-))*\\.(?!-)(?:[a-z\xA1\
            -\uFFFF-]{2,63}|xn--[a-z0-9]{1,59})(?<!-)\\.?|localhost))(?::\\d{1,5})?(?:[/?#][^\\\
            s]*)?\\z"
          type: string
      type: object
    SendEmail:
      properties: {}
      type: object
    Subscriber:
      properties:
        creation_date:
          format: date-time
          readOnly: true
          type: string
        email:
          format: email
          type: string
        id:
          format: uuid
          readOnly: true
          type: string
        metadata:
          nullable: true
          type: object
        notes:
          type: string
        referrer_url:
          type: string
        secondary_id:
          readOnly: true
          type: integer
        source:
          enum:
          - api
          - buttondown
          - csv
          - mailchimp
          - organic
          - nouveau
          - substack
          - tinyletter
          - typeform
          - user
          - admin
          - drip
          readOnly: true
          type: string
        subscriber_type:
          enum:
          - regular
          - premium
          - churning
          - past_due
          - gifted
          - unpaid
          - unactivated
          - unsubscribed
          - spammy
          - removed
          - trialed
          - disabled
          - paused
          type: string
        tags:
          items:
            type: string
          type: array
        utm_campaign:
          readOnly: true
          type: string
        utm_medium:
          readOnly: true
          type: string
        utm_source:
          readOnly: true
          type: string
      required:
      - email
      type: object
    SubscriberTag:
      properties:
        color:
          maxLength: 10
          type: string
        creation_date:
          format: date-time
          readOnly: true
          type: string
        description:
          nullable: true
          type: string
        id:
          format: uuid
          readOnly: true
          type: string
        name:
          maxLength: 100
          type: string
      required:
      - name
      type: object
    UploadedImage:
      properties:
        creation_date:
          format: date-time
          readOnly: true
          type: string
        id:
          format: uuid
          readOnly: true
          type: string
        image:
          format: binary
          type: string
      required:
      - image
      type: object
info:
  description: |
    # Introduction

    Hello and welcome to Buttondown's API schema!

    I've designed Buttondown's API to be as RESTful and uninteresting as possible: if there's a primitive in
    Buttondown, you should have a nice interface for it, with the ability to retrieve,
    create, modify, and delete. This means that with a few lines in your language
    of choice, you're able to programmatically keep track of your subscribers, send
    out new emails, and more.

    If you're confused about what Buttondown is, try
    going to [buttondown.email](https://buttondown.email).

    If you're looking
    for where to find your API Key, check your [settings page](https://buttondown.email/settings).

    # Authentication

    Clients should authenticate by passing the token key in the \"Authorization\"
    HTTP header, prepended with the string \"Token \". For example:

    ```
    Authorization: Token 401f7ac837da42b97f613d789819ff93537bee6a
    ```

    You can find your API key in your <a href='https://buttondown.email/settings'>Settings page</a>.

    # Events

    Events are Buttondown's way of telling you (likely via Webhooks) that something interesting has happened
    to your newsletter. You can view a table of all events [here](https://docs.buttondown.email/api-reference/events-and-webhooks).

    # Changelog

    The changelog provides a list of dated updates, each of which contains a number
    of potentially backwards-incompatible changes. There is no explicit versioning in the
    API at this time; all changes will be either compatible or breaking. (If I attempt any
    brittle changes to the API that may break current implementations, I'll be sure to add
    version gates.)

    ## 2022-11-24

    Added `/v1/email/:id/analytics`, which returns aggregated information about opens, clicks, and other events for a given email that you've sent.

    ## 2022-11-19

    Removed the `/v1/drafts`, `/v1/scheduled-emails`, and `/v1/unsubscribers` endpoints. The behavior of all three endpoints have been subsumed into `/v1/emails` and `/v1/subscribers`:

    -   you can create (or list) drafts by specifying `status='draft'`
    -   you can create (or list) scheduled emails by specifying `status='scheduled'`
    -   you can list unsubscribers by specifying `subscriber_type='unsubscribed'`

    ## 2021-01-02

    Added support to set and retrieve metadata on Emails.

    ## 2020-12-23

    Added deletion and update abilities to the [Scheduled emails endpoint](#tag/Scheduled-emails), giving you much
    more programmability than the hitherto append-only state of the world.

    ## 2020-12-09

    Added a deletion endpoint to the [Images endpoint](#tag/Images), allowing you to delete unused images.
  title: Buttondown
  version: ''
openapi: 3.0.2
paths:
  /emails:
    get:
      description: A simple ViewSet for viewing and editing emails.
      operationId: listEmails
      parameters:
      - description: A page number within the paginated result set.
        in: query
        name: page
        required: false
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  count:
                    example: 123
                    type: integer
                  next:
                    example: http://api.example.org/accounts/?page=4
                    format: uri
                    nullable: true
                    type: string
                  previous:
                    example: http://api.example.org/accounts/?page=2
                    format: uri
                    nullable: true
                    type: string
                  results:
                    items:
                      $ref: '#/components/schemas/Email'
                    type: array
                type: object
          description: ''
      tags:
      - emails
    post:
      description: A simple ViewSet for viewing and editing emails.
      operationId: createEmail
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Email'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Email'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Email'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
          description: ''
      tags:
      - emails
  /emails/{id}:
    get:
      description: A simple ViewSet for viewing and editing emails.
      operationId: retrieveEmail
      parameters:
      - description: A UUID string identifying this email.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
          description: ''
      tags:
      - emails
  /emails/{id}/analytics:
    get:
      description: A simple ViewSet for viewing and editing emails.
      operationId: analyticsEmail
      parameters:
      - description: A UUID string identifying this email.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
          description: ''
      tags:
      - emails
  /exports:
    get:
      description: ''
      operationId: listExports
      parameters:
      - description: A page number within the paginated result set.
        in: query
        name: page
        required: false
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  count:
                    example: 123
                    type: integer
                  next:
                    example: http://api.example.org/accounts/?page=4
                    format: uri
                    nullable: true
                    type: string
                  previous:
                    example: http://api.example.org/accounts/?page=2
                    format: uri
                    nullable: true
                    type: string
                  results:
                    items:
                      $ref: '#/components/schemas/Export'
                    type: array
                type: object
          description: ''
      tags:
      - exports
    post:
      description: ''
      operationId: createExport
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Export'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Export'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Export'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Export'
          description: ''
      tags:
      - exports
  /exports/{id}:
    get:
      description: ''
      operationId: retrieveExport
      parameters:
      - description: A UUID string identifying this export.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Export'
          description: ''
      tags:
      - exports
  /images:
    get:
      description: ''
      operationId: listUploadedImages
      parameters:
      - description: A page number within the paginated result set.
        in: query
        name: page
        required: false
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  count:
                    example: 123
                    type: integer
                  next:
                    example: http://api.example.org/accounts/?page=4
                    format: uri
                    nullable: true
                    type: string
                  previous:
                    example: http://api.example.org/accounts/?page=2
                    format: uri
                    nullable: true
                    type: string
                  results:
                    items:
                      $ref: '#/components/schemas/UploadedImage'
                    type: array
                type: object
          description: ''
      tags:
      - images
    post:
      description: ''
      operationId: createUploadedImage
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadedImage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UploadedImage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadedImage'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadedImage'
          description: ''
      tags:
      - images
  /images/{id}:
    delete:
      description: ''
      operationId: destroyUploadedImage
      parameters:
      - description: A UUID string identifying this uploaded image.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - images
    get:
      description: ''
      operationId: retrieveUploadedImage
      parameters:
      - description: A UUID string identifying this uploaded image.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadedImage'
          description: ''
      tags:
      - images
  /subscribers:
    get:
      description: A simple ViewSet for viewing and editing subscribers.
      operationId: listSubscribers
      parameters:
      - description: A page number within the paginated result set.
        in: query
        name: page
        required: false
        schema:
          type: integer
      - description: Which field to use when ordering the results.
        in: query
        name: ordering
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  count:
                    example: 123
                    type: integer
                  next:
                    example: http://api.example.org/accounts/?page=4
                    format: uri
                    nullable: true
                    type: string
                  previous:
                    example: http://api.example.org/accounts/?page=2
                    format: uri
                    nullable: true
                    type: string
                  results:
                    items:
                      $ref: '#/components/schemas/Subscriber'
                    type: array
                type: object
          description: ''
      tags:
      - subscribers
    post:
      description: A simple ViewSet for viewing and editing subscribers.
      operationId: createSubscriber
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscriber'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Subscriber'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Subscriber'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriber'
          description: ''
      tags:
      - subscribers
  /subscribers/{id}:
    delete:
      description: A simple ViewSet for viewing and editing subscribers.
      operationId: destroySubscriber
      parameters:
      - description: A UUID string identifying this subscriber.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Which field to use when ordering the results.
        in: query
        name: ordering
        required: false
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - subscribers
    get:
      description: A simple ViewSet for viewing and editing subscribers.
      operationId: retrieveSubscriber
      parameters:
      - description: A UUID string identifying this subscriber.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Which field to use when ordering the results.
        in: query
        name: ordering
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriber'
          description: ''
      tags:
      - subscribers
    patch:
      description: A simple ViewSet for viewing and editing subscribers.
      operationId: partialUpdateSubscriber
      parameters:
      - description: A UUID string identifying this subscriber.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Which field to use when ordering the results.
        in: query
        name: ordering
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscriber'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Subscriber'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Subscriber'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriber'
          description: ''
      tags:
      - subscribers
    put:
      description: A simple ViewSet for viewing and editing subscribers.
      operationId: updateSubscriber
      parameters:
      - description: A UUID string identifying this subscriber.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Which field to use when ordering the results.
        in: query
        name: ordering
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscriber'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Subscriber'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Subscriber'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriber'
          description: ''
      tags:
      - subscribers
  /subscribers/{id}/emails/{email_id}:
    post:
      description: A simple ViewSet for viewing and editing subscribers.
      operationId: sendEmailToSubscriber
      parameters:
      - description: A UUID string identifying this subscriber.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: ''
        in: path
        name: email_id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmail'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmail'
          description: ''
      tags:
      - subscribers
  /subscribers/{id}/send-reminder:
    post:
      description: A simple ViewSet for viewing and editing subscribers.
      operationId: sendReminderSubscriber
      parameters:
      - description: A UUID string identifying this subscriber.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Subscriber'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Subscriber'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Subscriber'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscriber'
          description: ''
      tags:
      - subscribers
  /tags:
    get:
      description: A simple ViewSet for viewing and editing tags.
      operationId: listSubscriberTags
      parameters:
      - description: A page number within the paginated result set.
        in: query
        name: page
        required: false
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  count:
                    example: 123
                    type: integer
                  next:
                    example: http://api.example.org/accounts/?page=4
                    format: uri
                    nullable: true
                    type: string
                  previous:
                    example: http://api.example.org/accounts/?page=2
                    format: uri
                    nullable: true
                    type: string
                  results:
                    items:
                      $ref: '#/components/schemas/SubscriberTag'
                    type: array
                type: object
          description: ''
      tags:
      - tags
    post:
      description: A simple ViewSet for viewing and editing tags.
      operationId: createSubscriberTag
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriberTag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubscriberTag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubscriberTag'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberTag'
          description: ''
      tags:
      - tags
  /tags/{id}:
    delete:
      description: A simple ViewSet for viewing and editing tags.
      operationId: destroySubscriberTag
      parameters:
      - description: A UUID string identifying this subscriber tag.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - tags
    get:
      description: A simple ViewSet for viewing and editing tags.
      operationId: retrieveSubscriberTag
      parameters:
      - description: A UUID string identifying this subscriber tag.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberTag'
          description: ''
      tags:
      - tags
    patch:
      description: A simple ViewSet for viewing and editing tags.
      operationId: partialUpdateSubscriberTag
      parameters:
      - description: A UUID string identifying this subscriber tag.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriberTag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubscriberTag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubscriberTag'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberTag'
          description: ''
      tags:
      - tags
    put:
      description: A simple ViewSet for viewing and editing tags.
      operationId: updateSubscriberTag
      parameters:
      - description: A UUID string identifying this subscriber tag.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriberTag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubscriberTag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubscriberTag'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriberTag'
          description: ''
      tags:
      - tags
